install.packages("C:/Users/AndreLau/Desktop/ggXG/ggXG_0.1.0.tar.gz", repos = NULL, type = "source")
library("ggGenshin")
library("ggXG")
library("ggplot2")
library("reshape2")
library("dplyr")
dat1 = aggregate(iris[, 1:4], by = list(iris$Species), mean) %>%
melt() %>%
rename(species = Group.1)
p1 = ggplot(dat1) +
geom_col(aes(x = variable, y = value, fill = species), position = "dodge") +
theme_test()
dat2 = iris[, c(5, 1, 2, 3)]
p2 = ggplot(dat2) +
geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Petal.Length), size = 3) +
theme_test()
if(dir.exists("out") == FALSE){
dir.create("out")
}
ggsave("out/SHOOTING_STAR_1.png", p1 + scale_fill_SHOOTING_STAR_1(), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_2.png", p2 + scale_color_SHOOTING_STAR_2(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_2.png", p1 + scale_fill_SHOOTING_STAR_2(), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_3.png", p2 + scale_color_SHOOTING_STAR_3(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_2.png", p2 + scale_color_SHOOTING_STAR_2(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_1.png", p2 + scale_color_SHOOTING_STAR_1(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_4.png", p2 + scale_color_SHOOTING_STAR_4(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_5.png", p2 + scale_color_SHOOTING_STAR_5(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_6.png", p2 + scale_color_SHOOTING_STAR_6(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_7.png", p2 + scale_color_SHOOTING_STAR_7(F), width = 6, height = 3)
ggsave("out/SHOOTING_STAR_8.png", p2 + scale_color_SHOOTING_STAR_8(F), width = 6, height = 3)
set.seed(123)
# 创建数据框
df <- data.frame(
group = rep(letters[1:10], each = 15),  # 这里使用letters[1:10]来得到a-j
gene1 = rnorm(150),
gene2 = rnorm(150),
gene3 = rnorm(150),
gene4 = rnorm(150),
gene5 = rnorm(150)
)
library(tidyverse)
# 计算每个组和基因的均值
df_melted <- df %>%
gather(key="gene", value="expression", -group) %>%
group_by(group, gene) %>%
summarise(mean_expression=mean(expression))
ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Mean Expression Levels across Genes and Groups") +
xlab("Gene") +
ylab("Mean Expression Level") +
theme_minimal() +
scale_fill_albedo()
ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Mean Expression Levels across Genes and Groups") +
xlab("Gene") +
ylab("Mean Expression Level") +
theme_minimal() +
scale_fill_SHOOTING_STAR_1()
plot_list <- lapply(1:length(ggXG::keys()$key.name), function(i) {
key <- ggXG::keys()$key.name[i]
scale_function_name <- paste0("ggXG::scale_fill_", key)
scale_function <- eval(parse(text=scale_function_name))
p <- ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ylab("Mean Expression Level") +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.title.x=element_blank()) +
scale_function()
# 添加标题
if (i == 1) {
p <- p + ggtitle("Mean Expression")
}
return(p)
})
library(gridExtra)
# 定义每个页面上的图的数量
plots_per_page <- 4
num_pages <- ceiling(length(plot_list) / plots_per_page)
pdf("XG_plots.pdf",width = 15,height = 10)
for (page in1:num_pages) {
ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Mean Expression Levels across Genes and Groups") +
xlab("Gene") +
ylab("Mean Expression Level") +
theme_minimal() +
scale_fill_SHOOTING_STAR_2()
# 计算每个组和基因的均值
df_melted <- df %>%
gather(key="gene", value="expression", -group) %>%
group_by(group, gene) %>%
summarise(mean_expression=mean(expression))
ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Mean Expression Levels across Genes and Groups") +
xlab("Gene") +
ylab("Mean Expression Level") +
theme_minimal() +
scale_fill_SHOOTING_STAR_2()
library("ggXG")
library("ggplot2")
library("tidyverse")
set.seed(123)
# 创建数据框
df <- data.frame(
group = rep(letters[1:10], each = 15),  # 这里使用letters[1:10]来得到a-j
gene1 = rnorm(150),
gene2 = rnorm(150),
gene3 = rnorm(150),
gene4 = rnorm(150),
gene5 = rnorm(150)
)
# 计算每个组和基因的均值
df_melted <- df %>%
gather(key="gene", value="expression", -group) %>%
group_by(group, gene) %>%
summarise(mean_expression=mean(expression))
ggplot(df_melted, aes(x=gene, y=mean_expression, fill=group)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Mean Expression Levels across Genes and Groups") +
xlab("Gene") +
ylab("Mean Expression Level") +
theme_minimal() +
scale_fill_SHOOTING_STAR_2()
